package com.rms.entity.tdd;

// Generated 2015-6-25 11:50:53 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Iterator;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang3.StringUtils;
import org.codehaus.jackson.annotate.JsonBackReference;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;

import com.rms.commons.global.RmsGlobal;
import com.rms.modules.utils.ConvertUtil;
import com.rms.utils.ApplicationProperties;

/**
 * TddInterface generated by hbm2java
 */
@Entity
@Table (
    name = "rms_interface",
    catalog = "rms")
public class RmsInterface implements java.io.Serializable {

	private static final long	      serialVersionUID	= 7438671164216379177L;

	private Integer	                  IId;

	private String	                  IName;

	private String	                  INameZh;

	private String	                  IUrl;

	private String	                  IDesc;

	private String	                  IHasParam;

	private String	                  IJson;

	private String	                  IJsonEncrypt;

	private String	                  IJsonDesc;

	private String	                  cateName;

	private Integer	                  cateId;

	private String	                  params;

	private String	                  status;

	private String	                  urlStr;

	private Set<RmsInterfaceParam>	  rmsInterfaceParamSet;

	private Set<RmsInterfaceCategory>	rmsInterfaceCategorySet;

	private Set<RmsFunction>	      rmsFunctionSet;

	@ManyToMany
	@JoinTable (
	    name = "rms_interface_param_relation",
	    joinColumns = {@JoinColumn (
	        name = "i_id")},
	    inverseJoinColumns = {@JoinColumn (
	        name = "ip_id")})
	@LazyCollection (LazyCollectionOption.TRUE)
	public Set<RmsInterfaceParam> getRmsInterfaceParamSet() {

		return rmsInterfaceParamSet;
	}

	public void setRmsInterfaceParamSet(Set<RmsInterfaceParam> rmsInterfaceParamSet) {

		this.rmsInterfaceParamSet = rmsInterfaceParamSet;
	}

	// @ManyToMany(mappedBy="tddInterfaceSet")
	@ManyToMany
	@JoinTable (
	    name = "rms_interface_category_relation",
	    joinColumns = {@JoinColumn (
	        name = "i_id")},
	    inverseJoinColumns = {@JoinColumn (
	        name = "i_cate_id")})
	@LazyCollection (LazyCollectionOption.TRUE)
	public Set<RmsInterfaceCategory> getRmsInterfaceCategorySet() {

		return rmsInterfaceCategorySet;
	}

	public void setRmsInterfaceCategorySet(Set<RmsInterfaceCategory> rmsInterfaceCategorySet) {

		this.rmsInterfaceCategorySet = rmsInterfaceCategorySet;
	}

	@ManyToMany
	@JoinTable (
	    name = "rms_function_interface_relation",
	    joinColumns = {@JoinColumn (
	        name = "i_id")},
	    inverseJoinColumns = {@JoinColumn (
	        name = "func_id")})
	@LazyCollection (LazyCollectionOption.TRUE)
	@JsonBackReference
	public Set<RmsFunction> getRmsFunctionSet() {

		return rmsFunctionSet;
	}

	public void setRmsFunctionSet(Set<RmsFunction> rmsFunctionSet) {

		this.rmsFunctionSet = rmsFunctionSet;
	}

	public RmsInterface() {

	}

	public RmsInterface(String IName, String IUrl, String IDesc, String INameZh, String iHasParam) {

		this.IName = IName;
		this.IUrl = IUrl;
		this.IDesc = IDesc;
		this.INameZh = INameZh;
		this.IHasParam = iHasParam;
	}

	@Id
	@GeneratedValue (
	    strategy = IDENTITY)
	@Column (
	    name = "i_id",
	    unique = true,
	    nullable = false)
	public Integer getIId() {

		return this.IId;
	}

	public void setIId(Integer IId) {

		this.IId = IId;
	}

	@Column (
	    name = "i_name",
	    length = 500,
	    nullable = false)
	public String getIName() {

		return this.IName;
	}

	public void setIName(String IName) {

		this.IName = IName;
	}

	@Column (
	    name = "i_name_zh",
	    length = 500,
	    nullable = false)
	public String getINameZh() {

		return this.INameZh;
	}

	public void setINameZh(String INameZh) {

		this.INameZh = INameZh;
	}

	@Column (
	    name = "i_url",
	    length = 500,
	    nullable = false)
	public String getIUrl() {

		return this.IUrl;
	}

	public void setIUrl(String IUrl) {

		this.IUrl = IUrl;
	}

	@Column (
	    name = "i_desc",
	    length = 800)
	public String getIDesc() {

		return this.IDesc;
	}

	public void setIDesc(String IDesc) {

		this.IDesc = IDesc;
	}

	@Column (
	    name = "i_has_param",
	    length = 2,
	    nullable = false)
	public String getIHasParam() {

		return IHasParam;
	}

	public void setIHasParam(String iHasParam) {

		IHasParam = iHasParam;
	}

	@Column (
	    name = "i_json")
	public String getIJson() {

		return IJson;
	}

	public void setIJson(String iJson) {

		IJson = iJson;
	}

	@Column (
	    name = "i_json_encrypt")
	public String getIJsonEncrypt() {

		return IJsonEncrypt;
	}

	public void setIJsonEncrypt(String iJsonEncrypt) {

		IJsonEncrypt = iJsonEncrypt;
	}

	@Column (
	    name = "i_json_desc",
	    length = 5000)
	public String getIJsonDesc() {

		return IJsonDesc;
	}

	public void setIJsonDesc(String IJsonDesc) {

		this.IJsonDesc = IJsonDesc;
	}

	@Transient
	public Integer getCateId() {

		Set<RmsInterfaceCategory> tmpSet = getRmsInterfaceCategorySet();
		if (tmpSet != null && !tmpSet.isEmpty()) {
			Iterator<RmsInterfaceCategory> it = tmpSet.iterator();
			while (it.hasNext()) {
				cateId = it.next().getICateId();
				break;
			}
		}
		else {
			cateId = -1;
		}
		return cateId;
	}

	public void setCateId(Integer cateId) {

		this.cateId = cateId;
	}

	@Transient
	public String getCateName() {

		Set<RmsInterfaceCategory> tmpSet = getRmsInterfaceCategorySet();
		if (tmpSet != null && !tmpSet.isEmpty()) {
			Iterator<RmsInterfaceCategory> it = tmpSet.iterator();
			while (it.hasNext()) {
				cateName = it.next().getICateName();
				break;
			}
		}
		else {
			cateName = "未设置分类";
		}
		return cateName;
	}

	public void setCateName(String cateName) {

		this.cateName = cateName;
	}

	@Transient
	public String getParams() {

		StringBuffer param = new StringBuffer("?");
		Set<RmsInterfaceParam> tmpSet = getRmsInterfaceParamSet();
		if (tmpSet != null && !tmpSet.isEmpty()) {
			Iterator<RmsInterfaceParam> it = tmpSet.iterator();
			while (it.hasNext()) {
				RmsInterfaceParam rmsInterfaceParam = it.next();
				param.append(rmsInterfaceParam.getIpName()).append("=").append(ConvertUtil.convertNull(rmsInterfaceParam.getIpValue()))
				        .append("&");
			}

			if (StringUtils.endsWith(param.toString(), "&")) {
				param = param.deleteCharAt(param.length() - 1);
			}
		}

		params = param.toString();
		params = StringUtils.equals("?", params) ? "" : params;
		return params;
	}

	public void setParams(String params) {

		this.params = params;
	}

	@Transient
	public String getStatus() {

		Set<RmsInterfaceParam> tmpParamSet = getRmsInterfaceParamSet();
		Set<RmsInterfaceCategory> tmpCateSet = getRmsInterfaceCategorySet();
		String hasParam = this.getIHasParam();
		if (tmpCateSet != null && !tmpCateSet.isEmpty()) {

			if (StringUtils.equals("y", hasParam)) {

				if (tmpParamSet != null && !tmpParamSet.isEmpty()) {
					status = "已开发";
				}
				else {
					status = "未开发";
				}
			}
			else {
				status = "已开发";
			}
		}
		else {
			status = "未开发";
		}
		return status;
	}

	public void setStatus(String status) {

		this.status = status;
	}

	@Transient
	public String getUrlStr() {

		urlStr = RmsGlobal.INTERFACE_HOST + getIUrl() + RmsGlobal.INTERFACE_SUFFIX;
		return urlStr;
	}

	public void setUrlStr(String urlStr) {

		this.urlStr = urlStr;
	}
}
